Activity 2 Questions
1) A deck has a card, as in a deck is composed of cards.
2)3
3) {ace,king,queen,jack,10,9,8,7,6,5,4,3,2}
   {spades,hearts,diamonds,clubs}
   {11,10,10,10,10,9,8,7,6,5,4,3,2,1}
4) Yes, because each element is aligned to its partner; you wouldn't have an ace with a value of 4.
Activity 3 Questions
1)
public static String flip() {
int rand =(int) Math.random()*101
if( rand <33 || rand>66) {
	return "heads";
}
else
	return "tails";

}
2)
public static boolean arePermutations(int[] x, int[] y) {
int xSum=0;
int ySum=0;
for(int e:x) {
xSum+=e;
}
for(int e:y) {
ySum+=e;
}
if( xSum==ySum) 
	return true;
else
	return false;

}
3) 3,2,1,0 just swaps them them from the end to the beginning

Activity 7 Questions: //Mr. M: 15/15
1) a deck of 52 cards, with ranks A (ace), 2, 3, 4, 5, 6, 7, 8, 9, 10, J (jack),
Q (queen), and K (king), and suits ♣ (clubs), ♦ (diamonds), ♥ (hearts), and ♠ (spades).

2)
builddeck()
shuffledeck()
dealcards()
while(!deck.empty() && !cardsOnTable.empty()) {
getMove()
checkMoveCondition()
move()
if(moveReducesCards) {
deal() 
}
checkWon()
}

3) No, because there is no getMove and player interfaces  
4)
	a) when creating a new game and in the constructor
	b) isLegal and anotherPlayIsPossible
	c) j♥ 6♣ 2♠ A♠ 4♥
	d) I put it in the code.
	e)  anotherPlayIsPossible because the cards get removed before it is called, leaving null.


Activity 8 Questions: //MR. M: 10/10
1) Thirteens is similar to elevens in that you need to find cards that add up to a number in a 10 card board. However, in 13s, kings are removed alone. Chances of winning 
are said to be 1/2. In 10s, there is a 13 card board where pairs that add up to 10 are removed and also the 4 face cards of the same rank. Chances of winning are 1/8.

2) The Board instance variables are initialized by calling super(args) in the constructor of the subclass. This method calls the constructor of the superclass in the subclass.

3) Abstract Methods: isLegal, anotherPlayISPossible
Yes, these methods do cover the diffrences because they specifically address the diffrences in rules between the games. This method won't work for the other games; you would need to create a new method.
//Mr. M: The abstract methods will have to be implemented differently in the Tens and Thirteens
games and will need different private helper methods to accomplish their tasks.

Activity 9 Questions:
1) Because there are diffrences in the board size between elevens and thirteens; there is no has-a or is-a relationship between their sizes.
//Mr. M: Because the board size is passed in to the constructor and doesn't change
2) Because the cards  differ between games and cannot be generalized
//Mr. M: Selecting cards doesn't different between games
3) Any class that would implement board would need to define its own isLegal and another PlayIsPossible. This design is stupid because not all games 
that require a board need these two methods(ex. games where there is no requirement for play possibility. 
//Mr. M: Yes, an interface would allow the CardGameGUI class to call isLegal and
anotherPlayIsPossible polymorphically. It would not work as well. The private instance variables shared by all boards cannot be
declared in an interface, and methods cannot be implemented in an interface. All of the boards
share behaviors that can be coded without knowing which kind of board it is. If an interface were
used instead of an abstract class, each subclass of Board would have to declare their own
private instance variables and rewrite the same implementations for the commonly shared
methods.
